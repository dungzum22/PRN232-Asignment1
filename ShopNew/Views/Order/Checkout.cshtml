@model List<ShopNew.Models.CartItem>
@{
    ViewData["Title"] = "Checkout";
}

@Html.AntiForgeryToken()

<h2>Checkout</h2>
@if (Model.Any())
{
    <div class="row">
        <div class="col-md-8">
            <h4>Order Summary</h4>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" alt="@item.ProductName" class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover;" />
                                    }
                                    @item.ProductName
                                </td>
                                <td>@item.Price.ToString("C")</td>
                                <td>@item.Quantity</td>
                                <td>@((item.Price * item.Quantity).ToString("C"))</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>Order Total</h5>
                </div>
                <div class="card-body">
                    <h4>Total: @ViewBag.Total.ToString("C")</h4>
                    
                    <!-- Stripe Payment Form -->
                    <form id="payment-form">
                        <div class="d-grid mt-3">
                            <button id="submit" class="btn btn-success btn-lg">
                                <span id="button-text">Pay Now</span>
                                <span id="spinner" class="spinner-border spinner-border-sm d-none" role="status"></span>
                            </button>
                        </div>
                        <div id="payment-message" class="d-none"></div>
                    </form>
                    
                    <div class="mt-3">
                        <a href="@Url.Action("Index", "Cart")" class="btn btn-secondary">Back to Cart</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <p class="lead">Your cart is empty.</p>
        <a href="@Url.Action("Index", "Products")" class="btn btn-primary">Continue Shopping</a>
    </div>
}

@section Scripts {
    <script>
        // Handle form submission
        document.querySelector('#payment-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            setLoading(true);

            try {
                const response = await fetch('/Order/CreateCheckoutSession', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                });

                const data = await response.json();
                console.log('Checkout Session Response:', data);
                
                if (data.error) {
                    console.error('API Error:', data.error);
                    showMessage(data.error);
                    setLoading(false);
                    return;
                }

                if (!data.checkout_url) {
                    console.error('No checkout URL in response');
                    showMessage('Failed to create checkout session');
                    setLoading(false);
                    return;
                }

                // Redirect to Stripe Checkout
                window.location.href = data.checkout_url;
            } catch (error) {
                console.error('Checkout error:', error);
                showMessage('Failed to start checkout: ' + error.message);
                setLoading(false);
            }
        });

        function setLoading(isLoading) {
            document.querySelector('#submit').disabled = isLoading;
            document.querySelector('#spinner').classList.toggle('d-none', !isLoading);
            document.querySelector('#button-text').textContent = isLoading ? 'Redirecting to Stripe...' : 'Pay Now';
        }

        function showMessage(message) {
            const messageContainer = document.querySelector('#payment-message');
            messageContainer.textContent = message;
            messageContainer.classList.remove('d-none');
        }
    </script>
}
